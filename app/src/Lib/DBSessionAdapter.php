<?php
declare(strict_types=1);

namespace Harpya\IP\Lib;

use PDO;

class DBSessionAdapter implements \SessionHandlerInterface
{
    protected $connection;

    protected $tablename;

    protected $configs;

    public function __construct($connection, $tablename = 'sessions', array $configs = [])
    {
        $this->connection = $connection;
        $this->tablename = $tablename;
        $this->configs = array_merge([
            'col_sessid' => 'sess_id',
            'col_data' => 'sess_data',
            'col_last_activity' => 'last_activity',
            'col_user_id' => 'user_id',
            'col_addr_id' => 'ip',
        ], $configs);
    }

    public function open($save_path, $sess_name)
    {
        return true;
    }

    public function read($sess_id)
    {
        $table = $this->tablename;
        $col_sessid = $this->configs['col_sessid'];
        $col_data = $this->configs['col_data'];
        $query = $this->connection->query("
            SELECT * FROM {$table} 
            WHERE {$col_sessid} = '$sess_id' 
            LIMIT 1
        ");

        $session = $query->fetch(PDO::FETCH_ASSOC);

        $this->exists = (false === empty($session));

        return $this->exists ? base64_decode($session[$col_data]) : '';
    }

    public function write($sess_id, $data)
    {
        $table = $this->tablename;
        $col_sessid = $this->configs['col_sessid'];
        $col_data = $this->configs['col_data'];
        $col_la = $this->configs['col_last_activity'];
        $col_user_id = $this->configs['col_user_id'];
        $col_addr_id = $this->configs['col_addr_id'];

        $sData = \unserialize($data);

        $data = base64_encode($data);
        $time = time();

        if (isset($this->userID)) {
            $userID = $this->userID;
        } else {
            $userID = 0;
        }
        if (isset($this->ip)) {
            $ip = $this->ip;
        } else {
            $ip = '-';
        }

        if ($this->exists) {
            $this->connection->query("
                UPDATE {$table} 
                SET 
                    {$col_data} = '{$data}',
                    {$col_la} = {$time},
                    {$col_user_id} = {$userID},
                    {$col_addr_id} = '{$ip}'
                WHERE {$col_sessid} = '{$sess_id}'
            ");
        } else {
            $this->connection->query("
                INSERT INTO {$table}
                ({$col_sessid}, {$col_data}, {$col_la},{$col_user_id}, {$col_addr_id})
                VALUES ('{$sess_id}','{$data}', {$time}, {$userID}, '{$ip}')
            ");
        }

        $this->exists = true;
        return true;
    }

    public function close()
    {
        return true;
    }

    public function destroy($sess_id)
    {
        $table = $this->tablename;
        $col_sessid = $this->configs['col_sessid'];

        $this->connection->query("DELETE FROM {$table} WHERE {$col_sessid}='{$sess_id}'");

        return true;
    }

    public function gc($lifetime)
    {
        $table = $this->tablename;
        $col_la = $this->configs['col_last_activity'];
        $expired_time = time() - $lifetime;

        $this->connection->query("DELETE FROM {$table} WHERE {$col_la} <= {$expired_time}");

        return true;
    }

    // public function create_sid()
    // {
    //     // available since PHP 5.5.1
    //     // invoked internally when a new session id is needed
    //     // no parameter is needed and return value should be the new session id created
    //     // ...
    // }

    // public function validateId($sessionId)
    // {
    //     // implements SessionUpdateTimestampHandlerInterface::validateId()
    //     // available since PHP 7.0
    //     // return value should be true if the session id is valid otherwise false
    //     // if false is returned a new session id will be generated by php internally
    //     // ...
    // }

    // public function updateTimestamp($sessionId, $sessionData)
    // {
    //     // implements SessionUpdateTimestampHandlerInterface::validateId()
    //     // available since PHP 7.0
    //     // return value should be true for success or false for failure
    //     // ...
    // }
}
